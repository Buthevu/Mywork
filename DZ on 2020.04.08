type l = Var of string|App of l * l|Abs of string * l;;        

let rec find_bette_redex l =
match l with
Var s-> []
|App (l1,l2) -> (match l1 with
                 Abs (_,_) -> [App (l1,l2)] @ (find_bette_redex l1) @ (find_bette_redex l2)  
                |_->(find_bette_redex l1) @ (find_bette_redex l2))
|Abs (s,l1) ->(find_bette_redex l1);;

let rec string_of_l l=
  match l with
   Var s->s
  |App (l1,l2) -> "("^(string_of_l l1)^" "^(string_of_l l2)^")"
  |Abs (s,l2) -> "$"^s^"."^string_of_l l2;;

let rec read_l s i=
if s.[i] = '(' then (let (i2,l2)= read_l s (i+1) in 
                                        let (i3,l3)= read_l s (i2+1) in (i3+1,App (l2,l3)))
               else if s.[i] = '$' then (let (i2,s2)= read_s s (i+1) in
                                        let (i3,l3)= read_l s (i2+1) in (i3,Abs (s2,l3)))
                                   else let (i2,s2) = read_s s i in
                                                   (i2,Var s2)

and read_s s i=
if i = String.length s then (i,"")
                       else if (s.[i] = '.')||(s.[i] = ' ')||(s.[i] = ')') then (i,"")
                                                                         else let (i2,s2) = (read_s s (i+1)) in
                                                                                  (i2,((String.make 1 (s.[i]))^s2));;


print_string"Find bette redex in '($1.($2.3 5) 7)' (threre is two bete redex: ($1.($2.3 5) 7) and ($2.3 5)) \n";;

List.iter (fun x-> print_string (string_of_l x);print_string"\n") (find_bette_redex ((fun (x,y) -> y) (read_l "($1.($2.3 5) 7)" 0)));;

print_string"end\n\n";;

let rec replace la1 s1 la2= 
match la1 with
   Var s->if s1 = s then la2 else la1
  |App (l1,l2) -> App ((replace l1 s1 la2),(replace l2 s1 la2)) 
  |Abs (s,l2) -> if s = s1 then la1 else Abs (s,replace l2 s1 la2);;

print_string"replace in '((x x) y)' var 'x' to '(y y)'(it must become (((y y) (y y)) y) \n";;

print_string (string_of_l (replace ((fun (x,y) -> y) (read_l "((x x) y)" 0)) "x" ((fun (x,y) -> y) (read_l "(y y)" 0))));;

print_string"end\n\n";;

(*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*)

type debraun = Var_d of string| Index of int| App_d of debraun * debraun| Abs_d of  debraun;;

let rec check_include x l=
match l with
a::b->if a = x then true else (check_include x b)
|[]->false;;

let rec get_index x l=
match l with
a::b-> if a = x then 1 else (1+(get_index x b))
|[]->failwith"2";;

let debraun_of_lamda lamd=
let rec sup_f lam lis=
match lam with
Var s-> if (check_include s lis) then Index (get_index s lis) else Var_d s
|App (l1,l2) -> App_d (sup_f l1 lis,sup_f l2 lis)
|Abs (s,l2) -> Abs_d (sup_f l2 (s::lis)) in
sup_f lamd [];;

let rec print_lamda lam =
match lam with
Var s-> print_string("\""^s^"\"")
|App (l1,l2) -> print_string"(";print_lamda l1;print_string" ";print_lamda l2;print_string")"
|Abs (s,l2)-> print_string("$\""^s^"\".");print_lamda l2;;

let rec print_debraun deb =
match deb with
Var_d s-> print_string("\""^s^"\"")
|Index i->print_int i
|App_d (l1,l2) -> print_string"(";print_debraun l1;print_string" ";print_debraun l2;print_string")"
|Abs_d l2-> print_string"$.";print_debraun l2;;
 

print_debraun (debraun_of_lamda (Abs ("x",(App (Var "x",Var"y")))));;

let find_new l=
let rec sup_f i lis=
if (check_include ("x#"^(string_of_int i)) lis) then (sup_f (i+1) lis) else (string_of_int i) in
"x#"^(sup_f 1 l);;

let rec list_of_names_debraun deb=
match deb with
Var_d s->[s]
|App_d (l1,l2) -> ((list_of_names_debraun l1)@(list_of_names_debraun l2))
|Abs_d l2 ->(list_of_names_debraun l2)
|_-> [];;

 
let rec give_elem i l=
match l with
a::b-> if i = 1 then a else (give_elem  (i - 1) b)
|[]-> failwith"1";;


let lamda_of_debraun lamd=
let rec sup_f lam lis_var lis_name=
(match lam with
Var_d s->(lis_name,Var s)
|Index i->(lis_name,Var (give_elem i lis_var))
|Abs_d l2->let n_var = (find_new lis_name) in 
           let (n_lis_name,n_l) = (sup_f l2 (n_var::lis_var) (n_var::lis_name)) in 
                          (n_lis_name,Abs (n_var,n_l))
|App_d (l1,l2)->let (n_lis_name,n_l1) = (sup_f l1 lis_var lis_name) in
                let (nn_lis_name,n_l2) = (sup_f l2 lis_var (*n_lis_name*)lis_name) in
                  (nn_lis_name,App (n_l1,n_l2)) )in
(fun (x,y) -> y) (sup_f lamd [] (list_of_names_debraun lamd));;

let rec check_bette_red deb =
match deb with
App_d (l1,l2) -> (match l1 with Abs_d _->true|_->((check_bette_red l1)||(check_bette_red l2)))
|Abs_d l2 -> check_bette_red l2
|_->false;;

let level_up deb=
let rec sup_f de n=
match de with
Var_d s->Var_d s
|Index i -> if i >= n then Index (i+1) else de
|App_d (l1,l2) -> App_d (sup_f l1 n,sup_f l2 n)
|Abs_d l2->Abs_d (sup_f l2 (n+1)) in
sup_f deb 1;;       

let rec replace deb n deb2=
match deb with
Index i-> if i = n then deb2 else (if i > n then Index (i -1) else Index i)
|Var_d s->Var_d s
|App_d (l1,l2) ->App_d ((replace l1 n deb2),(replace l2 n deb2))
|Abs_d l2->Abs_d (replace l2 (n+1) (level_up deb2));;

let rec betta_reduction deb=
match deb with
Index i-> Index i
|Var_d s-> Var_d s
|App_d (l1,l2) -> (match l1 with
                   Abs_d l3 -> (replace l3 1 l2)
                  |_-> let n_l1 = betta_reduction l1 in if n_l1 = l1 then (App_d (l1,(betta_reduction l2))) else (App_d (n_l1,l2))) 
|Abs_d l2-> Abs_d (betta_reduction l2);;

let rec betta_reduct_with_writing lam=
print_lamda lam;
print_string"\n";
let deb = (debraun_of_lamda lam) in
let n_deb = betta_reduction deb in
if n_deb = deb then lam else (betta_reduct_with_writing (lamda_of_debraun n_deb));;

let rec just_betta_reduct lam=
let deb = (debraun_of_lamda lam) in
let n_deb = betta_reduction deb in
if n_deb = deb then lam else (just_betta_reduct (lamda_of_debraun n_deb));;

(*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*)

(*+1 = $n.$f.$x.(f ((n f) x))
+ = $a.$b.((a +1) b)

$f.$x.(f (f x))
(($a.$b.((a $n.$f.$x.(f ((n f) x))) b) $f.$x.(f (f x))) $f.$x.(f (f x)))
*)
print_string"Do betta reduction of '(($a.$b.((a $n.$f.$x.(f ((n f) x))) b) $f.$x.(f (f x))) $f.$x.(f (f x)))' (this is ((+ 2) 2) on lambda)\n";;

let _ = betta_reduct_with_writing ((fun (x,y) -> y) (read_l "(($a.$b.((a $n.$f.$x.(f ((n f) x))) b) $f.$x.(f (f x))) $f.$x.(f (f x)))" 0));;

print_string"end\n\n";;

let check_normal lam =
let deb = (debraun_of_lamda lam) in
let n_deb = betta_reduction deb in
if n_deb = deb then true else false;;

print_string"Is '(\x.(x x)) (\x.(x x))' normal form?\nAnswer: ";;

print_string(if (check_normal ((fun (x,y) -> y) (read_l "($x.(x x)) ($x.(x x))" 0))) then "Yes\n" else "No\n");;
